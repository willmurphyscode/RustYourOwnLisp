use std::str::FromStr;

use name_types::{CoolAdjective, CoolNoun, FinalNoun, ScientificName};

grammar;


pub CoolAdjective : Box<CoolAdjective> = {
  "horrendous" => Box::new(CoolAdjective::Horrendous),
  "stupendous" => Box::new(CoolAdjective::Stupendous),
  "gargantuan" => Box::new(CoolAdjective::Gargantuan),
  "ultimate" => Box::new(CoolAdjective::Ultimate),
};


pub CoolNoun : CoolNoun = {
   "space"  => CoolNoun::Space,
   "time" => CoolNoun::Time,
   "matter" => CoolNoun::Matter,
   "energy" => CoolNoun::Energy,
};


pub FinalNoun : FinalNoun = {
   "kablooie"  => FinalNoun::Kablooie,
   "swoosh" => FinalNoun::Swoosh,
   "frobber" => FinalNoun::Frobber,
   "atomizer" => FinalNoun::Atomizer,
   "event"  => FinalNoun::Event,
   "device" => FinalNoun::Device,
};

pub AdjectiveList : Vec<Box<CoolAdjective>> = Comma<CoolAdjective>;

Comma<T>: Vec<T> = { // (1)
    <v:(<T> ", ")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

pub ScientificName : ScientificName = {
  <a:AdjectiveList> <c:CoolNoun> <f:FinalNoun> => ScientificName {
    adjective_list : a, cool_noun: c, final_noun: f
  }
};